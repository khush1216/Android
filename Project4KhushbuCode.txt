package edu.uic.kdurge2.cs478.guessfour;

import android.app.Fragment;
import android.os.Handler;
import android.app.Notification;
import android.os.Looper;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutCompat;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import org.w3c.dom.Text;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.LogRecord;

public class MainActivity extends AppCompatActivity {

    Button start;

    private int countMovesPlayer1 = 0;
    private int countMovesPlayer2 = 0;

    Thread player1, player2;
    //ui thread handler
    Handler handler;

    Map<Integer,Integer> map1 = new HashMap<Integer,Integer>();
    ArrayList<Integer> correctGuessNoPos = new ArrayList<Integer>();


    private int player1Number;
    private int player2Number;

    private int player1Secret;
    private int player2Secret;

    TextView player1Disp;
    TextView player2Disp;
    TextView uiDisp;


    Handler thread1Handler;
    private Handler thread2Handler;

    private static final int START_GAME = 1;
    private static final int GET_NEXT_GUESS = 2;
    private static final int UPDATE_GUESS_PLAYER1_ON_UI = 3;
    private static final int UPDATE_GUESS_PLAYER2_ON_UI = 4;


    //ScrollView thread1Scroll,thread2Scroll;

    LinearLayout thread1Linear,thread2Linear;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        start = (Button) findViewById(R.id.startButton);

        //initial display of secret numbers chosen
        player1Disp = (TextView) findViewById(R.id.player1Thread);
        player2Disp = (TextView) findViewById(R.id.player2Thread);

        thread1Linear = (LinearLayout) findViewById(R.id.linearThread1);
        thread2Linear = (LinearLayout) findViewById(R.id.linearThread2);

        uiDisp = (TextView) findViewById(R.id.displayDetails);

        //ui thread handler
        handler = new Handler(){
            @Override
            public void handleMessage(Message msg) {

                Message message;
                switch (msg.what){

                    case START_GAME:
                        //update the guess, secret numbers already updated on button click
                        message = thread1Handler.obtainMessage(GET_NEXT_GUESS);
                        thread1Handler.sendMessage(message);
                        break;
                    case UPDATE_GUESS_PLAYER1_ON_UI:

                        int guess_thread1 = msg.arg1;
                        //update scroll view thread1
                        updateScrollThread1(guess_thread1);

                        //check if correct guess
                        if(guess_thread1 == player2Secret){

                            player1.interrupt();
                            player2.interrupt();
                            handler.removeCallbacksAndMessages(null);

                            thread1Handler.removeCallbacksAndMessages(null);
                            thread2Handler.removeCallbacksAndMessages(null);

                            thread1Handler.getLooper().quitSafely();
                            thread2Handler.getLooper().quitSafely();

                            //display result on ui
                            break;
                        }
                        //display the correctly placed and guessed digits and the correctly guessed but incorrectly placed digits
                        ///////////////////

                        //make p2 sleep
                        thread2Handler.post(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Thread.sleep(2000);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    //now player 2 makes a move
                        message = thread2Handler.obtainMessage(GET_NEXT_GUESS);
                        thread2Handler.sendMessage(message);
                        break;

                    case UPDATE_GUESS_PLAYER2_ON_UI:


                        map1.clear();
                        correctGuessNoPos.clear();

                        int guess_thread2 = msg.arg1;
                        updateScrollThread2(guess_thread2);
                        //check if correct guess
                        if(guess_thread2 == player1Secret){
                            player1.interrupt();
                            player2.interrupt();
                            handler.removeCallbacksAndMessages(null);

                            thread1Handler.removeCallbacksAndMessages(null);
                            thread2Handler.removeCallbacksAndMessages(null);

                            thread1Handler.getLooper().quitSafely();
                            thread2Handler.getLooper().quitSafely();

                            //display result on ui
                            break;
                        }

                        map1 = correctGuessAndPosition(guess_thread2,player1Secret);
                        correctGuessNoPos = correctNumbersOnly(guess_thread2,player1Secret,map1);

                        //display the correctly placed and guessed digits and the correctly guessed but incorrectly placed digits
                        /////////////////////////
                        //make p1 sleep
                        thread1Handler.post(new Runnable() {
                            @Override
                            public void run() {
                                try {
                                    Thread.sleep(2000);
                                } catch (InterruptedException e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                        //make thread1 make the next move
                        message = thread1Handler.obtainMessage(GET_NEXT_GUESS);
                        thread1Handler.sendMessage(message);
                        break;

                    default:
                        break;

                }


            }
        }; //end of ui handler


        findViewById(R.id.startButton).setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {

                //stop threads and restart
                if(player1 != null && player2 != null) {

                    thread1Linear.removeAllViews();
                    thread2Linear.removeAllViews();

                    map1.clear();
                    correctGuessNoPos.clear();

                    countMovesPlayer1 = 0;
                    countMovesPlayer2 = 0;
                    player1.interrupt();
                    player2.interrupt();
                    handler.removeCallbacksAndMessages(null);

                    thread1Handler.removeCallbacksAndMessages(null);
                    thread2Handler.removeCallbacksAndMessages(null);

                    //thread1Handler.getLooper().quitSafely();
                    //thread2Handler.getLooper().quitSafely();

                    //restart the gate
                    clearCurrentData();
                }

                clearCurrentData();
                //update the textviews to random numbers
                player1Secret = generateRandom();
                player2Secret = generateRandom();

                player1Disp.setText(String.valueOf(player1Secret));
                player2Disp.setText(String.valueOf(player2Secret));

                //create new thread for player 1
                player1 = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        Looper.prepare();
                        thread1Handler = new Handler() {
                            Message message;
                            public void handleMessage(Message msg){

                                switch (msg.what){
                                    //make a guess and send the guess to the UI to update
                                    case GET_NEXT_GUESS:
                                        message = handler.obtainMessage(UPDATE_GUESS_PLAYER1_ON_UI);
                                        message.arg1 = player1Move();
                                        handler.sendMessage(message);
                                        break;

                                    default:
                                        break;

                                }

                            }
                        }; //end of player 1 handler
                        //initially will not enter the handler. Tell ui to start the game
                        Message message = handler.obtainMessage(START_GAME);
                        handler.sendMessage(message);
                        Looper.loop();
                    }
                });
                player1.start();

                player2 = new Thread(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        Looper.prepare();
                        thread2Handler = new Handler() {

                            public void handleMessage(Message msg){
                                Message message;
                                switch (msg.what){

                                    case GET_NEXT_GUESS:
                                        message = handler.obtainMessage(UPDATE_GUESS_PLAYER2_ON_UI);
                                        message.arg1 = player2Move(map1,correctGuessNoPos);
                                        handler.sendMessage(message);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        };
                        Looper.loop();
                    }
                });
                player2.start();
            }
        });

    }
        public void clearCurrentData() {

            player1Disp.setText("");
            player2Disp.setText("");
            uiDisp.setText("");
    }

        //
        public int player1Move(){

            int player1ThreadGuess;

            if(countMovesPlayer1 == 0){
                player1ThreadGuess = generateRandom();
                countMovesPlayer1 ++;
                return player1ThreadGuess;
            }

            return generateRandom();
        }

        //clever thread
        public int player2Move(Map<Integer,Integer> correctGuessPos, ArrayList<Integer> correctNumbersOnly){

            int numb[]=new int[4];

            int player2ThreadGuess;
            if(countMovesPlayer2 == 0){
                countMovesPlayer2 ++;
                player2ThreadGuess = generateRandom();
                return player2ThreadGuess;
            }
            countMovesPlayer2 ++;
            if(correctGuessPos.isEmpty() && correctNumbersOnly.isEmpty() ){
                player2ThreadGuess = generateRandom();
                return player2ThreadGuess;
            }

           if(!correctGuessPos.isEmpty() || !correctNumbersOnly.isEmpty()) {

               int pos;
               int actualNumber;

               if (!correctGuessPos.isEmpty()) {

                   for (Map.Entry<Integer, Integer> entry : correctGuessPos.entrySet()) {

                       pos = entry.getValue();
                       actualNumber = entry.getKey();

                       numb[pos] = actualNumber;

                   }

               }
               if (!correctNumbersOnly.isEmpty()) {

                   int tempCount = 0;
                   int arraylistCount = 0;
                   int length = correctNumbersOnly.size();

                   while (tempCount < 4 && arraylistCount < length) {

                       if (numb[tempCount] == 0) {

                           numb[tempCount] = correctNumbersOnly.get(arraylistCount);
                           arraylistCount++;
                       }
                       tempCount++;

                   }
               }


           }
           //combine the digits in array to a number

            player2ThreadGuess = combineDigits(numb);
            return player2ThreadGuess;
        }


    public boolean checkForDuplicate(int n[],int val) {
        int c = 0;
        while(c<4) {

            if(n[c] == val) {
                return true;
            }
            c++;
        }
        return false;
    }

    //combine the array; replace 0 with random **non-duplicate** value
    public int combineDigits(int numb[]){

            for(int i = 0;i<4;i++){

                int number = 0;
                boolean flag = true;

                while(flag) {
                    number = generateRandomSingleDigit();
                    flag = checkForDuplicate(numb, number);
                }

                if(!flag) {
                    if(numb[i] == 0) {
                        numb[i] = number;
                    }
                }
            }
            int result1 = 1000*numb[0] + 100 * numb[1] + 10*numb[2] + 1*numb[3];
            return result1;

//            for(int i = 0;i<4;i++){
//                if(numb[i] == 0){
//                    numb[i] = generateRandomSingleDigit();
//                }
//            }
//            int result1 = 1000*numb[0] + 100 * numb[1] + 10*numb[2] + 1*numb[3];
//            return result1;
//
        }

        public int generateRandomSingleDigit(){
            Random random = new Random();
            int number = random.nextInt(9 - 1 + 1) + 1 ;

            return number;

        }
        public void updateScrollThread1(int guess){

            LinearLayoutCompat.LayoutParams lparams = new LinearLayoutCompat.LayoutParams(
                    LinearLayoutCompat.LayoutParams.WRAP_CONTENT, LinearLayoutCompat.LayoutParams.WRAP_CONTENT);

            TextView tv=new TextView(this);
            tv.setText(Integer.toString(guess));
            thread1Linear.addView(tv);
        }

        public void updateScrollThread2(int guess){

            LinearLayoutCompat.LayoutParams lparams = new LinearLayoutCompat.LayoutParams(
                    LinearLayoutCompat.LayoutParams.WRAP_CONTENT, LinearLayoutCompat.LayoutParams.WRAP_CONTENT);


            TextView tv1=new TextView(this);
            tv1.setText(Integer.toString(guess));
            thread2Linear.addView(tv1);


        }


        public int generateRandom(){

        ArrayList<Integer> numbers = new ArrayList<Integer>();
        for(int i = 1; i < 10; i++){
            numbers.add(i);
        }

        Collections.shuffle(numbers);

        String result = "";
        for(int i = 0; i < 4; i++){
            result += numbers.get(i).toString();
        }
        return Integer.parseInt(result);
    }

    //returns correct numbers but at incorrect places
    public ArrayList<Integer> correctNumbersOnly(int guessNum, int secretNum, Map<Integer,Integer> correctGuessPos){
        ArrayList<Integer> correctGuessOnly = new ArrayList<Integer>();
        ArrayList<Integer> guessNumArray = new ArrayList<Integer>();
        ArrayList<Integer> secretNumArray = new ArrayList<Integer>();

        guessNumArray = convertToList(guessNum);
        secretNumArray = convertToList(secretNum);

        for(int x : guessNumArray) {
            if(secretNumArray.contains(x)) {
                if(correctGuessPos.containsKey(x)) {
                    //do nothing

                }
                else {
                    correctGuessOnly.add(x);
                }
            }
        }

        return correctGuessOnly;

    }


    public ArrayList<Integer> convertToList(int number){

        ArrayList<Integer> res = new ArrayList<Integer>();
        String str = Integer.toString(number);

        int count = 0;
        while(count < 4) {

            Character num1 = str.charAt(count);
            int addnum = Character.getNumericValue(num1);
            res.add(addnum);
            count++;
        }

        return res;

    }

    //
    public Map<Integer,Integer> correctGuessAndPosition(int guessNum, int secretNum) {

        Map<Integer,Integer> guessPos = new HashMap<Integer,Integer>();

        int count = 4;
        while(count >0) {

            if(guessNum%10 == secretNum%10) {

                guessPos.put(guessNum%10, count-1);
            }
            guessNum = guessNum/10;
            secretNum = secretNum/10;
            count --;

        }

        return guessPos;

    }
}//end of class
